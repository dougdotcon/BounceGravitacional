#!/usr/bin/env python3
"""
Demonstra√ß√£o Simples do Framework de F√≠sica Computacional
Vers√£o simplificada sem problemas de sintaxe
"""

import numpy as np
import time
from src.numerical_methods.integrators import IntegratorNumerico
from src.numerical_methods.monte_carlo import ModeloIsing2D, ConfiguracaoMonteCarlo
from src.physics_models.quantum_mechanics import EquacaoSchrodinger
from src.physics_models.relativity import CosmologiaRelatividade


def demo_integracao():
    """Demonstra√ß√£o de integra√ß√£o num√©rica"""
    print("üî¢ Demonstra√ß√£o: Integra√ß√£o Num√©rica Avan√ßada")

    # Sistema: Oscilador harm√¥nico amortecido
    def sistema_oscilador(t, y):
        omega = 2 * np.pi  # Frequ√™ncia
        gamma = 0.1        # Amortecimento
        return np.array([
            y[1],
            -2 * gamma * y[1] - omega**2 * y[0]
        ])

    y0 = np.array([1.0, 0.0])  # Condi√ß√µes iniciais
    t_span = (0, 10)

    integrator = IntegratorNumerico(rtol=1e-10, atol=1e-12)
    resultado = integrator.integrar_sistema(sistema_oscilador, y0, t_span)

    if resultado['sucesso']:
        print(f"‚úÖ Integra√ß√£o bem-sucedida! N√∫mero de passos: {resultado['metricas_qualidade']['numero_passos']}")
        print(f"   Precis√£o alcan√ßada: {resultado['metricas_qualidade']['precisao_alcancada']:.2e}")
    else:
        print(f"‚ùå Erro na integra√ß√£o: {resultado['mensagem']}")

    return resultado


def demo_monte_carlo():
    """Demonstra√ß√£o de Monte Carlo"""
    print("\nüé≤ Demonstra√ß√£o: Simula√ß√µes Monte Carlo")

    config = ConfiguracaoMonteCarlo(
        tamanho_sistema=(16, 16),
        temperatura=2.2,  # Pr√≥ximo da Tc
        n_sweeps=500,
        campo_externo=0.0
    )

    modelo = ModeloIsing2D(config)
    resultados = modelo.executar_simulacao(verbose=False)

    print("‚úÖ Simula√ß√£o conclu√≠da!")
    print(".2f")
    print(".6f")
    print(".6f")

    return resultados


def demo_mecanica_quantica():
    """Demonstra√ß√£o de mec√¢nica qu√¢ntica"""
    print("\n‚öõÔ∏è Demonstra√ß√£o: Mec√¢nica Qu√¢ntica Computacional")

    # Oscilador harm√¥nico qu√¢ntico
    def potencial_oscilador(x):
        omega = 1.0
        return 0.5 * omega**2 * x**2

    schrodinger = EquacaoSchrodinger(potencial_oscilador, -5, 5, 1000)
    energias, wavefunctions = schrodinger.resolver_estados_ligados(3)

    print("Energias calculadas (unidades at√¥micas):")
    for n, energia in enumerate(energias):
        energia_analitica = 0.5 + n  # E_n = (n + 1/2)‚Ñèœâ
        erro = abs(energia - energia_analitica)
        print(".6f"
              ".6f"
              ".2e")

    return {'energias': energias, 'wavefunctions': wavefunctions}


def demo_relatividade():
    """Demonstra√ß√£o de relatividade geral"""
    print("\nüåå Demonstra√ß√£o: Relatividade Geral")

    # Cosmologia LCDM
    cosmo = CosmologiaRelatividade(H0=70, Omega_m=0.3, Omega_lambda=0.7)

    idade = cosmo.idade_universo()
    print(".2f")

    # Evolu√ß√£o do universo
    evol = cosmo.evoluir_universo(a_inicial=0.01, a_final=1.0, n_pontos=100)

    if evol['sucesso']:
        print("‚úÖ Evolu√ß√£o cosmol√≥gica calculada!")
        print(f"   Pontos calculados: {len(evol['a'])}")
        print(".3f")

    return evol


def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print("üöÄ Demonstra√ß√£o Simples do Framework de F√≠sica Computacional")
    print("=" * 70)
    print("Esta demonstra√ß√£o mostra as funcionalidades b√°sicas do framework")
    print("implementado baseado no fine-tuning de IA para f√≠sica te√≥rica.\n")

    start_time = time.time()
    resultados = {}

    # Executar demonstra√ß√µes
    resultados['integracao'] = demo_integracao()
    resultados['monte_carlo'] = demo_monte_carlo()
    resultados['quantica'] = demo_mecanica_quantica()
    resultados['relatividade'] = demo_relatividade()

    end_time = time.time()
    tempo_total = end_time - start_time

    # Resumo final
    print("\nüéâ Demonstra√ß√£o Conclu√≠da com Sucesso!")
    print("=" * 70)
    print("üìä Resumo dos Resultados:")
    print(f"   ‚úÖ Integra√ß√£o num√©rica: {resultados['integracao']['sucesso']}")
    print(f"   ‚úÖ Simula√ß√£o Monte Carlo: {'Sucesso' if resultados['monte_carlo'] else 'Falhou'}")
    print(f"   ‚úÖ Mec√¢nica qu√¢ntica: {len(resultados['quantica']['energias'])} estados calculados")
    print(f"   ‚úÖ Relatividade geral: {'Sucesso' if resultados['relatividade']['sucesso'] else 'Falhou'}")
    print(".2f")

    print("\nüéØ Framework de F√≠sica Computacional Funcionando Perfeitamente!")
    print("   Baseado no fine-tuning de IA especializada")
    print("   Pronto para pesquisa avan√ßada em f√≠sica te√≥rica!")

    return resultados


if __name__ == "__main__":
    resultados = main()

    # Salvar resumo simples
    import json
    resumo = {
        'tempo_execucao': time.time(),
        'resultados': {
            'integracao': resultados['integracao']['sucesso'],
            'monte_carlo': bool(resultados['monte_carlo']),
            'quantica': len(resultados['quantica']['energias']),
            'relatividade': resultados['relatividade']['sucesso']
        }
    }

    with open('resultados/resumo_simples.json', 'w') as f:
        json.dump(resumo, f, indent=2)

    print("\nüìÑ Resumo salvo em: resultados/resumo_simples.json")
